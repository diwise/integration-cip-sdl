// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"context"
	"sync"
)

// Ensure, that ContextBrokerClientMock does implement ContextBrokerClient.
// If this is not the case, regenerate this file with moq.
var _ ContextBrokerClient = &ContextBrokerClientMock{}

// ContextBrokerClientMock is a mock implementation of ContextBrokerClient.
//
// 	func TestSomethingThatUsesContextBrokerClient(t *testing.T) {
//
// 		// make and configure a mocked ContextBrokerClient
// 		mockedContextBrokerClient := &ContextBrokerClientMock{
// 			AddEntityFunc: func(ctx context.Context, entity interface{}) error {
// 				panic("mock out the AddEntity method")
// 			},
// 			UpdateEntityFunc: func(ctx context.Context, entity interface{}, entityID string) error {
// 				panic("mock out the UpdateEntity method")
// 			},
// 		}
//
// 		// use mockedContextBrokerClient in code that requires ContextBrokerClient
// 		// and then make assertions.
//
// 	}
type ContextBrokerClientMock struct {
	// AddEntityFunc mocks the AddEntity method.
	AddEntityFunc func(ctx context.Context, entity interface{}) error

	// UpdateEntityFunc mocks the UpdateEntity method.
	UpdateEntityFunc func(ctx context.Context, entity interface{}, entityID string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddEntity holds details about calls to the AddEntity method.
		AddEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entity is the entity argument value.
			Entity interface{}
		}
		// UpdateEntity holds details about calls to the UpdateEntity method.
		UpdateEntity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entity is the entity argument value.
			Entity interface{}
			// EntityID is the entityID argument value.
			EntityID string
		}
	}
	lockAddEntity    sync.RWMutex
	lockUpdateEntity sync.RWMutex
}

// AddEntity calls AddEntityFunc.
func (mock *ContextBrokerClientMock) AddEntity(ctx context.Context, entity interface{}) error {
	if mock.AddEntityFunc == nil {
		panic("ContextBrokerClientMock.AddEntityFunc: method is nil but ContextBrokerClient.AddEntity was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Entity interface{}
	}{
		Ctx:    ctx,
		Entity: entity,
	}
	mock.lockAddEntity.Lock()
	mock.calls.AddEntity = append(mock.calls.AddEntity, callInfo)
	mock.lockAddEntity.Unlock()
	return mock.AddEntityFunc(ctx, entity)
}

// AddEntityCalls gets all the calls that were made to AddEntity.
// Check the length with:
//     len(mockedContextBrokerClient.AddEntityCalls())
func (mock *ContextBrokerClientMock) AddEntityCalls() []struct {
	Ctx    context.Context
	Entity interface{}
} {
	var calls []struct {
		Ctx    context.Context
		Entity interface{}
	}
	mock.lockAddEntity.RLock()
	calls = mock.calls.AddEntity
	mock.lockAddEntity.RUnlock()
	return calls
}

// UpdateEntity calls UpdateEntityFunc.
func (mock *ContextBrokerClientMock) UpdateEntity(ctx context.Context, entity interface{}, entityID string) error {
	if mock.UpdateEntityFunc == nil {
		panic("ContextBrokerClientMock.UpdateEntityFunc: method is nil but ContextBrokerClient.UpdateEntity was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		Entity   interface{}
		EntityID string
	}{
		Ctx:      ctx,
		Entity:   entity,
		EntityID: entityID,
	}
	mock.lockUpdateEntity.Lock()
	mock.calls.UpdateEntity = append(mock.calls.UpdateEntity, callInfo)
	mock.lockUpdateEntity.Unlock()
	return mock.UpdateEntityFunc(ctx, entity, entityID)
}

// UpdateEntityCalls gets all the calls that were made to UpdateEntity.
// Check the length with:
//     len(mockedContextBrokerClient.UpdateEntityCalls())
func (mock *ContextBrokerClientMock) UpdateEntityCalls() []struct {
	Ctx      context.Context
	Entity   interface{}
	EntityID string
} {
	var calls []struct {
		Ctx      context.Context
		Entity   interface{}
		EntityID string
	}
	mock.lockUpdateEntity.RLock()
	calls = mock.calls.UpdateEntity
	mock.lockUpdateEntity.RUnlock()
	return calls
}
