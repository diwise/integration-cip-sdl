// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package citywork

import (
	"context"
	"sync"
)

// Ensure, that SdlClientMock does implement SdlClient.
// If this is not the case, regenerate this file with moq.
var _ SdlClient = &SdlClientMock{}

// SdlClientMock is a mock implementation of SdlClient.
//
// 	func TestSomethingThatUsesSdlClient(t *testing.T) {
//
// 		// make and configure a mocked SdlClient
// 		mockedSdlClient := &SdlClientMock{
// 			GetFunc: func(cxt context.Context) ([]byte, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedSdlClient in code that requires SdlClient
// 		// and then make assertions.
//
// 	}
type SdlClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(cxt context.Context) ([]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Cxt is the cxt argument value.
			Cxt context.Context
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *SdlClientMock) Get(cxt context.Context) ([]byte, error) {
	if mock.GetFunc == nil {
		panic("SdlClientMock.GetFunc: method is nil but SdlClient.Get was just called")
	}
	callInfo := struct {
		Cxt context.Context
	}{
		Cxt: cxt,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(cxt)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedSdlClient.GetCalls())
func (mock *SdlClientMock) GetCalls() []struct {
	Cxt context.Context
} {
	var calls []struct {
		Cxt context.Context
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
